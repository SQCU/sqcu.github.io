<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Same QCU</title>
    <link>https://sqcu.github.io/posts/</link>
    <description>Recent content in Posts on Same QCU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Mar 2021 16:30:01 -0700</lastBuildDate><atom:link href="https://sqcu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ruby (on) Rails Retro(spective)</title>
      <link>https://sqcu.github.io/posts/ruby-rails-retro/</link>
      <pubDate>Mon, 29 Mar 2021 16:30:01 -0700</pubDate>
      
      <guid>https://sqcu.github.io/posts/ruby-rails-retro/</guid>
      <description>PREFACE Ruby-speedrun was a &amp;lsquo;fun&amp;rsquo; project. I&amp;rsquo;d heard mythically good things about ru on rai in the past,
 (although I can never quite remember the sources?)
(maybe I&amp;rsquo;m conflating multiple 00s/10s bloggers with Patrick McKenzie&amp;rsquo;s posts on rapid web development in RuORai?)
 at the very least that it was fast, simple, and straightforward to directly add fleshed out features to a dynamic web app.
 (everything on a computer is just an app these days ðŸ˜”)</description>
    </item>
    
    <item>
      <title>Ruby Tutorial Speedrun</title>
      <link>https://sqcu.github.io/posts/ruby-tutorial-speedrun/</link>
      <pubDate>Wed, 17 Mar 2021 08:47:11 +0300</pubDate>
      
      <guid>https://sqcu.github.io/posts/ruby-tutorial-speedrun/</guid>
      <description>PREFACE: This is a story about how I accepted an interview with an organization that seemed to think I was a &amp;ldquo;ruby&amp;rdquo; (rails presumably?) developer.
Unwilling to disabuse a nice technical recruiter, and with only 1 full day to prepare for the interview&amp;hellip;
The product of this extremely hasty exercise in scaffolding scaffolds with scaffolding might still be hosted live at:
https://frozen-ridge-66039.herokuapp.com/microposts
Please don&amp;rsquo;t break it until at least 4pm pacific time, thank you~!</description>
    </item>
    
    <item>
      <title>LOGOS TEST</title>
      <link>https://sqcu.github.io/posts/logos-test/</link>
      <pubDate>Tue, 01 Dec 2020 12:24:46 -0800</pubDate>
      
      <guid>https://sqcu.github.io/posts/logos-test/</guid>
      <description>The doxa are clearly established.
A decent, morally upstanding, firm, thick, upright &amp;lsquo;kin of the code&amp;rsquo; only ever makes one change at a time.
Unfortunately, the atomic unit of realtime animation is something like
&amp;ldquo;a routine that moves in a pattern that changes over time so that it might be made clear it is programmatically defined&amp;rdquo;.
This means testing a few new methods.
Window.requestAnimationFrame() Helpfully, moz docs provided literally everything we needed to know to use requestAnimationFrame to write framerate-independent animation controls, logic, and draw calls.</description>
    </item>
    
    <item>
      <title>Glazed Frames</title>
      <link>https://sqcu.github.io/posts/glazed-frames/</link>
      <pubDate>Thu, 26 Nov 2020 11:27:58 -0800</pubDate>
      
      <guid>https://sqcu.github.io/posts/glazed-frames/</guid>
      <description>Some thoughts about BONES -rotation operations to resolve all of the bones in a rig are only dependent on previous bones within that rig.
-this means the longest series of dependent transforms is, at worst case,
transform-call-cost * bones-in-biggest-rig-graph
-if you wanted a really stupid number of animated entities in a scene, you could run the operations to transform skeleton 1 through 23,467 concurrently.
-the transforms we want to apply on our BONES sure sound like they might be modeled by lin alg.</description>
    </item>
    
    <item>
      <title>Just About Skeledone</title>
      <link>https://sqcu.github.io/posts/just-about-skeledone/</link>
      <pubDate>Sun, 15 Nov 2020 17:44:56 -0800</pubDate>
      
      <guid>https://sqcu.github.io/posts/just-about-skeledone/</guid>
      <description>sqcu:&amp;ldquo;should probably post a design brief or update on github so it looks fresh when linked, which is a shameless and obvious and still probably correct play to make&amp;rdquo;
sqcu:&amp;ldquo;lmaoo how the HECK can you do decent visual design without falling on the trash &amp;rsquo;10s generic pixel artstyle&amp;rdquo;
sqcu:my guesses would be:
sqcu:-use 8 bit color or more
sqcu:-use bright colors and big sprites
sqcu:-polysprite, using multiple simple sprites animated together which can double as game-logic hitboxes that let you avoid having to do super complicated hitbox /hurtboxing in a separate design later</description>
    </item>
    
    <item>
      <title>Static Site Generators</title>
      <link>https://sqcu.github.io/posts/henlo-world/</link>
      <pubDate>Sun, 15 Nov 2020 16:15:16 -0800</pubDate>
      
      <guid>https://sqcu.github.io/posts/henlo-world/</guid>
      <description>Peer Pressure and Static Site Generation So I had heard many stories about static site generation, about the possible gains in consistency, rapidity of development, of not needing to codge together some hideous mnemonic device to truly understand your sitemap as you frantically tab from html to html in your text editor of choice.
Editing naked html feels perfectly fine, but messing with styling is inconvenient, someone else already made all of these themes, and your favorite chat app has been subtly converting you to use markdown syntax instead of fields of blooming &amp;lt;angle brackies&amp;gt; as far as the eye can &amp;lt;/see&amp;gt;.</description>
    </item>
    
  </channel>
</rss>
